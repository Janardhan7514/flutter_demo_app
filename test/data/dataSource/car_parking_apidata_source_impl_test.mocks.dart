// Mocks generated by Mockito 5.2.0 from annotations
// in demo_app/test/data/dataSource/car_parking_apidata_source_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i2;

import 'package:demo_app/data/dataSource/car_parking_apidata_source_impl.dart'
    as _i5;
import 'package:demo_app/domain/entity/parking_domain_entity.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDuration_0 extends _i1.Fake implements Duration {}

class _FakeHttpClientRequest_1 extends _i1.Fake
    implements _i2.HttpClientRequest {}

class _FakeParkingDomainEntity_2 extends _i1.Fake
    implements _i3.ParkingDomainEntity {}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i2.HttpClient {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get idleTimeout => (super.noSuchMethod(
        Invocation.getter(#idleTimeout),
        returnValue: _FakeDuration_0(),
      ) as Duration);
  @override
  set idleTimeout(Duration? _idleTimeout) => super.noSuchMethod(
        Invocation.setter(
          #idleTimeout,
          _idleTimeout,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set connectionTimeout(Duration? _connectionTimeout) => super.noSuchMethod(
        Invocation.setter(
          #connectionTimeout,
          _connectionTimeout,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set maxConnectionsPerHost(int? _maxConnectionsPerHost) => super.noSuchMethod(
        Invocation.setter(
          #maxConnectionsPerHost,
          _maxConnectionsPerHost,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get autoUncompress => (super.noSuchMethod(
        Invocation.getter(#autoUncompress),
        returnValue: false,
      ) as bool);
  @override
  set autoUncompress(bool? _autoUncompress) => super.noSuchMethod(
        Invocation.setter(
          #autoUncompress,
          _autoUncompress,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set userAgent(String? _userAgent) => super.noSuchMethod(
        Invocation.setter(
          #userAgent,
          _userAgent,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set authenticate(
          _i4.Future<bool> Function(
    Uri,
    String,
    String?,
  )?
              f) =>
      super.noSuchMethod(
        Invocation.setter(
          #authenticate,
          f,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set connectionFactory(
          _i4.Future<_i2.ConnectionTask<_i2.Socket>> Function(
    Uri,
    String?,
    int?,
  )?
              f) =>
      super.noSuchMethod(
        Invocation.setter(
          #connectionFactory,
          f,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set findProxy(String Function(Uri)? f) => super.noSuchMethod(
        Invocation.setter(
          #findProxy,
          f,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set authenticateProxy(
          _i4.Future<bool> Function(
    String,
    int,
    String,
    String?,
  )?
              f) =>
      super.noSuchMethod(
        Invocation.setter(
          #authenticateProxy,
          f,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set badCertificateCallback(
          bool Function(
    _i2.X509Certificate,
    String,
    int,
  )?
              callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #badCertificateCallback,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set keyLog(dynamic Function(String)? callback) => super.noSuchMethod(
        Invocation.setter(
          #keyLog,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<_i2.HttpClientRequest> open(
    String? method,
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #open,
          [
            method,
            host,
            port,
            path,
          ],
        ),
        returnValue:
            Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest_1()),
      ) as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> openUrl(
    String? method,
    Uri? url,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #openUrl,
          [
            method,
            url,
          ],
        ),
        returnValue:
            Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest_1()),
      ) as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> get(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest_1()),
      ) as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> getUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #getUrl,
          [url],
        ),
        returnValue:
            Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest_1()),
      ) as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> post(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest_1()),
      ) as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> postUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #postUrl,
          [url],
        ),
        returnValue:
            Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest_1()),
      ) as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> put(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest_1()),
      ) as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> putUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #putUrl,
          [url],
        ),
        returnValue:
            Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest_1()),
      ) as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> delete(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest_1()),
      ) as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> deleteUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #deleteUrl,
          [url],
        ),
        returnValue:
            Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest_1()),
      ) as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> patch(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest_1()),
      ) as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> patchUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #patchUrl,
          [url],
        ),
        returnValue:
            Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest_1()),
      ) as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> head(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest_1()),
      ) as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> headUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #headUrl,
          [url],
        ),
        returnValue:
            Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest_1()),
      ) as _i4.Future<_i2.HttpClientRequest>);
  @override
  void addCredentials(
    Uri? url,
    String? realm,
    _i2.HttpClientCredentials? credentials,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addCredentials,
          [
            url,
            realm,
            credentials,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addProxyCredentials(
    String? host,
    int? port,
    String? realm,
    _i2.HttpClientCredentials? credentials,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addProxyCredentials,
          [
            host,
            port,
            realm,
            credentials,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CarParkingAPIRemoteDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCarParkingAPIRemoteDataSourceImpl extends _i1.Mock
    implements _i5.CarParkingAPIRemoteDataSourceImpl {
  MockCarParkingAPIRemoteDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.ParkingDomainEntity> getSlotForCar(
    String? slotType,
    String? parkingSpace,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSlotForCar,
          [
            slotType,
            parkingSpace,
          ],
        ),
        returnValue:
            Future<_i3.ParkingDomainEntity>.value(_FakeParkingDomainEntity_2()),
      ) as _i4.Future<_i3.ParkingDomainEntity>);
  @override
  _i4.Future<bool> releaseSlotForCar(
    String? slotType,
    String? parkingSpace,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #releaseSlotForCar,
          [
            slotType,
            parkingSpace,
          ],
        ),
        returnValue: Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
