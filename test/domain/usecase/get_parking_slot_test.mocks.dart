// Mocks generated by Mockito 5.2.0 from annotations
// in demo_app/test/domain/usecase/get_parking_slot_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:demo_app/domain/entity/parking_domain_entity.dart' as _i6;
import 'package:demo_app/domain/repository/carparking_repository.dart' as _i3;
import 'package:demo_app/errors.dart' as _i5;
import 'package:fpdart/fpdart.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [CarParkingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCarParkingRepository extends _i1.Mock
    implements _i3.CarParkingRepository {
  MockCarParkingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ParkingDomainEntity>> getSlot({
    String? spaceId,
    String? slotType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSlot,
          [],
          {
            #spaceId: spaceId,
            #slotType: slotType,
          },
        ),
        returnValue:
            Future<_i2.Either<_i5.Failure, _i6.ParkingDomainEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.ParkingDomainEntity>()),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ParkingDomainEntity>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> releaseSlot({
    String? slotType,
    String? spaceId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #releaseSlot,
          [],
          {
            #slotType: slotType,
            #spaceId: spaceId,
          },
        ),
        returnValue: Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>()),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
