// Mocks generated by Mockito 5.2.0 from annotations
// in demo_app/test/presentation/bloc/car_parking_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:demo_app/domain/entity/parking_domain_entity.dart' as _i8;
import 'package:demo_app/domain/entity/tarrif_domain_entity.dart' as _i11;
import 'package:demo_app/domain/repository/carparking_repository.dart' as _i2;
import 'package:demo_app/domain/repository/tariff_plans_repository.dart' as _i4;
import 'package:demo_app/domain/usecase/get_parking_slot.dart' as _i5;
import 'package:demo_app/domain/usecase/get_tarrif_plans.dart' as _i10;
import 'package:demo_app/domain/usecase/release_parking_slot.dart' as _i9;
import 'package:demo_app/errors.dart' as _i7;
import 'package:fpdart/fpdart.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCarParkingRepository_0 extends _i1.Fake
    implements _i2.CarParkingRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeTariffsPlanRepository_2 extends _i1.Fake
    implements _i4.TariffsPlanRepository {}

/// A class which mocks [GetParkingSlotUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetParkingSlotUseCase extends _i1.Mock
    implements _i5.GetParkingSlotUseCase {
  MockGetParkingSlotUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CarParkingRepository get featuresRepository => (super.noSuchMethod(
        Invocation.getter(#featuresRepository),
        returnValue: _FakeCarParkingRepository_0(),
      ) as _i2.CarParkingRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.ParkingDomainEntity>> call(
          _i5.CarParkingUseCaseParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            Future<_i3.Either<_i7.Failure, _i8.ParkingDomainEntity>>.value(
                _FakeEither_1<_i7.Failure, _i8.ParkingDomainEntity>()),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.ParkingDomainEntity>>);
}

/// A class which mocks [ReleaseParkingSlotUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockReleaseParkingSlotUseCase extends _i1.Mock
    implements _i9.ReleaseParkingSlotUseCase {
  MockReleaseParkingSlotUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> call(
          _i9.CarParkingUseCaseParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>()),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);
}

/// A class which mocks [GetTariffPlansUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTariffPlansUseCase extends _i1.Mock
    implements _i10.GetTariffPlansUseCase {
  MockGetTariffPlansUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TariffsPlanRepository get featuresRepository => (super.noSuchMethod(
        Invocation.getter(#featuresRepository),
        returnValue: _FakeTariffsPlanRepository_2(),
      ) as _i4.TariffsPlanRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i11.TariffDomainEntity>> call(
          _i10.TariffPlanUseCaseParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            Future<_i3.Either<_i7.Failure, _i11.TariffDomainEntity>>.value(
                _FakeEither_1<_i7.Failure, _i11.TariffDomainEntity>()),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i11.TariffDomainEntity>>);
}
