// Mocks generated by Mockito 5.2.0 from annotations
// in demo_app/test/presentation/pages/main.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:bloc/bloc.dart' as _i8;
import 'package:demo_app/domain/usecase/get_parking_slot.dart' as _i2;
import 'package:demo_app/domain/usecase/release_parking_slot.dart' as _i3;
import 'package:demo_app/presentation/bloc/car_parking_cubit.dart' as _i6;
import 'package:demo_app/presentation/bloc/car_parking_states.dart' as _i4;
import 'package:flutter/cupertino.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetParkingSlotUseCase_0 extends _i1.Fake
    implements _i2.GetParkingSlotUseCase {}

class _FakeReleaseParkingSlotUseCase_1 extends _i1.Fake
    implements _i3.ReleaseParkingSlotUseCase {}

class _FakeCarParkingState_2 extends _i1.Fake implements _i4.CarParkingState {}

class _FakeStreamSubscription_3<T> extends _i1.Fake
    implements _i5.StreamSubscription<T> {}

/// A class which mocks [CarParkingCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockCarParkingCubit extends _i1.Mock implements _i6.CarParkingCubit {
  MockCarParkingCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetParkingSlotUseCase get getByServiceTypeUseCase => (super.noSuchMethod(
        Invocation.getter(#getByServiceTypeUseCase),
        returnValue: _FakeGetParkingSlotUseCase_0(),
      ) as _i2.GetParkingSlotUseCase);
  @override
  _i3.ReleaseParkingSlotUseCase get patchUseCase => (super.noSuchMethod(
        Invocation.getter(#patchUseCase),
        returnValue: _FakeReleaseParkingSlotUseCase_1(),
      ) as _i3.ReleaseParkingSlotUseCase);
  @override
  _i4.CarParkingState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCarParkingState_2(),
      ) as _i4.CarParkingState);
  @override
  _i5.Stream<_i4.CarParkingState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: Stream<_i4.CarParkingState>.empty(),
      ) as _i5.Stream<_i4.CarParkingState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i5.Future<void> getSlotForCarParking(
    _i7.BuildContext? context,
    String? size,
    int? parkingSpace,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSlotForCarParking,
          [
            context,
            size,
            parkingSpace,
          ],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> releaseSlotForCarParking(
    _i7.BuildContext? context,
    String? size,
    int? parkingSpace,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #releaseSlotForCarParking,
          [
            context,
            size,
            parkingSpace,
          ],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void setLoadedState() => super.noSuchMethod(
        Invocation.method(
          #setLoadedState,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.StreamSubscription<_i4.CarParkingState> listen(
    void Function(_i4.CarParkingState)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_3<_i4.CarParkingState>(),
      ) as _i5.StreamSubscription<_i4.CarParkingState>);
  @override
  void emit(_i4.CarParkingState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i8.Change<_i4.CarParkingState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i5.Future<void>);
}
